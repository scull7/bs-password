[{"href": "./index.html", "title": "code block", "contents": "let algo = Password.Algorithm.Bcrypt;\n\nPassword.Promise.token(algo, 31)\n|> Js.Promise.then_(token => Js.log2(\"Token: \", token) |> Js.Promise.resolve)", "rendered": "<pre><code>let algo = Password.Algorithm.Bcrypt;\n\nPassword.Promise.token(algo, 31)\n|> Js.Promise.then_(token => Js.log2(\"Token: \", token) |> Js.Promise.resolve)</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "let password = \"This is my password\";\nlet algo = Password.Algorithm.Bcrypt;\n\nPassword.Promise.deriveKey(algo, password)\n|> Js.Promise.then_(result =>\n  switch (result) {\n  | Belt.Result.Error(e) => raise(e)\n  | Belt.Result.Ok((_, hash)) => Js.Promise.resolve(hash)\n  }\n)\n|> Js.Promise.then_(hash => Password.Promise.verify(algo, hash, password))\n|> Js.Promise.then_(isValid =>\n  Js.log2(\"Does Match: \", isValid) |> Js.Promise.resolve\n) ", "rendered": "<pre><code>let password = \"This is my password\";\nlet algo = Password.Algorithm.Bcrypt;\n\nPassword.Promise.deriveKey(algo, password)\n|> Js.Promise.then_(result =>\n  switch (result) {\n  | Belt.Result.Error(e) => raise(e)\n  | Belt.Result.Ok((_, hash)) => Js.Promise.resolve(hash)\n  }\n)\n|> Js.Promise.then_(hash => Password.Promise.verify(algo, hash, password))\n|> Js.Promise.then_(isValid =>\n  Js.log2(\"Does Match: \", isValid) |> Js.Promise.resolve\n) </code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "let password = \"This is my password\";\nlet algorithm = Password.Algorithm.Bcrypt;\n\nPassword.Promise.deriveKey(algorithm, password)\n|> Js.Promise.then_(result =>\n  switch (result) {\n  | Belt.Result.Error(e) => raise(e)\n  | Belt.Result.Ok((salt, hash)) => Js.log3(\"Salt and key: \", salt, hash)\n  }\n  |> Js.Promise.resolve\n)", "rendered": "<pre><code>let password = \"This is my password\";\nlet algorithm = Password.Algorithm.Bcrypt;\n\nPassword.Promise.deriveKey(algorithm, password)\n|> Js.Promise.then_(result =>\n  switch (result) {\n  | Belt.Result.Error(e) => raise(e)\n  | Belt.Result.Ok((salt, hash)) => Js.log3(\"Salt and key: \", salt, hash)\n  }\n  |> Js.Promise.resolve\n)</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html#Promise-based-interface.", "title": "Promise based interface.", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "let algo = Password.Algorithm.Bcrypt;\n\nPassword.Future.token(algo, 16)\n|. Future.mapOk(token => Js.log2(\"Token: \", token))\n|. Future.mapError(raise)", "rendered": "<pre><code>let algo = Password.Algorithm.Bcrypt;\n\nPassword.Future.token(algo, 16)\n|. Future.mapOk(token => Js.log2(\"Token: \", token))\n|. Future.mapError(raise)</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "let password = \"This is my password\";\nlet algo = Password.Algorithm.Bcrypt;\n\nPassword.Future.deriveKey(algo, password)\n|. Future.flatMapOk(((_, hash)) => Password.Future.verify(algo, hash, password))\n|. Future.mapOk(isValid => Js.log2(\"Is Valid: \", isValid))\n|. Future.mapError(raise)", "rendered": "<pre><code>let password = \"This is my password\";\nlet algo = Password.Algorithm.Bcrypt;\n\nPassword.Future.deriveKey(algo, password)\n|. Future.flatMapOk(((_, hash)) => Password.Future.verify(algo, hash, password))\n|. Future.mapOk(isValid => Js.log2(\"Is Valid: \", isValid))\n|. Future.mapError(raise)</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "let password = \"This is my password\";\nlet algorithm = Password.Algorithm.Bcrypt;\n\nPassword.Future.deriveKey(algorithm, password)\n|. Future.mapOk(((salt, hash)) => Js.log3(\"Salt and Key: \", salt, hash))\n|. Future.mapError(raise);", "rendered": "<pre><code>let password = \"This is my password\";\nlet algorithm = Password.Algorithm.Bcrypt;\n\nPassword.Future.deriveKey(algorithm, password)\n|. Future.mapOk(((salt, hash)) => Js.log3(\"Salt and Key: \", salt, hash))\n|. Future.mapError(raise);</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html#reason-future-based-interface.", "title": "reason-future based interface.", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "let algorithm = Password.Algorithm.Bcrypt;\nlet length = 8;\n\nPassword.token(algorithm, length, (result) => {\n  switch(result) {\n  | Belt.Result.Error(e) => raise(e)\n  | Belt.Result.Ok(token) => Js.log2(\"Token: \", token)\n  };\n});", "rendered": "<pre><code>let algorithm = Password.Algorithm.Bcrypt;\nlet length = 8;\n\nPassword.token(algorithm, length, (result) => {\n  switch(result) {\n  | Belt.Result.Error(e) => raise(e)\n  | Belt.Result.Ok(token) => Js.log2(\"Token: \", token)\n  };\n});</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "let password = \"This is my passsword\";\nlet algorithm = Password.Algorithm.Bcrypt;\n\nPassword.deriveKey(algorithm, password, (result) => {\n  switch (result) {\n  | Belt.Result.Error(e) => raise(e)\n  | Belt.Result.Ok((_, hash)) =>\n    Password.verify(algorithm, hash, password, (result2) => {\n    switch (result) {\n    | Belt.Result.Error(e) => raise(e)\n    | Belt.Result.Ok(isValid) => Js.log2(\"isValid: \", isValid)\n    }\n    });\n  };\n});", "rendered": "<pre><code>let password = \"This is my passsword\";\nlet algorithm = Password.Algorithm.Bcrypt;\n\nPassword.deriveKey(algorithm, password, (result) => {\n  switch (result) {\n  | Belt.Result.Error(e) => raise(e)\n  | Belt.Result.Ok((_, hash)) =>\n    Password.verify(algorithm, hash, password, (result2) => {\n    switch (result) {\n    | Belt.Result.Error(e) => raise(e)\n    | Belt.Result.Ok(isValid) => Js.log2(\"isValid: \", isValid)\n    }\n    });\n  };\n});</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "let password = \"This is my password\";\nlet algorithm = Password.Algorithm.Bcrypt;\n\nPassword.deriveKey(algorithm, password, (result) => {\n  switch (result) {\n  | Belt.Result.Error(e) => raise(e)\n  | Belt.Result.Ok((salt, hash)) => Js.log3(\"Salt and Key\", salt, hash)\n  };\n});", "rendered": "<pre><code>let password = \"This is my password\";\nlet algorithm = Password.Algorithm.Bcrypt;\n\nPassword.deriveKey(algorithm, password, (result) => {\n  switch (result) {\n  | Belt.Result.Error(e) => raise(e)\n  | Belt.Result.Ok((salt, hash)) => Js.log3(\"Salt and Key\", salt, hash)\n  };\n});</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html#Basic-Callback-based-interface.", "title": "Basic Callback based interface.", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html#Usage", "title": "Usage", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "{\n  \"bs-dependencies\": [ \"bs-password\" ]\n}", "rendered": "<pre><code>{\n  \"bs-dependencies\": [ \"bs-password\" ]\n}</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Then add bs-password to your bs-dependencies in bsconfig.json", "rendered": "Then add <code>bs-password</code> to your <code>bs-dependencies</code> in <code>bsconfig.json</code>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "yarn add bs-password", "rendered": "<pre><code>yarn add bs-password</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Inside of a BuckleScript project:", "rendered": "Inside of a BuckleScript project:", "breadcrumb": "Home"},
{"href": "./index.html#How-do-I-install-it-", "title": "How do I install it?", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "A password hashing libarary for ReasonML", "rendered": "A password hashing libarary for ReasonML", "breadcrumb": "Home"},
{"href": "./index.html#bs-password", "title": "bs-password", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Build Status\nCoverage Status", "rendered": "<a href=\"https://travis-ci.com/scull7/bs-password\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\"><img src='https://travis-ci.com/scull7/bs-password.svg?branch=master' alt='Build Status' /></a>\n<a href=\"https://coveralls.io/github/scull7/bs-password?branch=master\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\"><img src='https://coveralls.io/repos/github/scull7/bs-password/badge.svg?branch=master' alt='Coverage Status' /></a>", "breadcrumb": "Home"},
{"href": "./api/Password_scrypt.html#value-token", "title": "token", "contents": "token Belt Result t exn   ", "rendered": "<h4 class='item'>let token: ('a, Belt.Result.t('a, exn) => 'a) => 'a</h4>", "breadcrumb": "Password_scrypt"},
{"href": "./api/Password_scrypt.html#value-verify", "title": "verify", "contents": "verify Belt Result t exn    ", "rendered": "<h4 class='item'>let verify: ('a, 'a, Belt.Result.t('a, exn) => 'a) => 'a</h4>", "breadcrumb": "Password_scrypt"},
{"href": "./api/Password_scrypt.html#value-deriveKey", "title": "deriveKey", "contents": "deriveKey Belt Result t exn   ", "rendered": "<h4 class='item'>let deriveKey: ('a, Belt.Result.t('a, exn) => 'a) => 'a</h4>", "breadcrumb": "Password_scrypt"},
{"href": "./api/Password_scrypt.html#value-notImplemented", "title": "notImplemented", "contents": "notImplemented Belt Result t exn", "rendered": "<h4 class='item'>let notImplemented: Belt.Result.t('a, exn)</h4>", "breadcrumb": "Password_scrypt"},
{"href": "./api/Password_scrypt.html", "title": "Password_scrypt", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Password_scrypt"},
{"href": "./api/Password_scrypt.html", "title": "Password_scrypt", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Password_scrypt"},
{"href": "./api/Password_scrypt.html#Password_scrypt", "title": "Password_scrypt", "contents": "", "rendered": "", "breadcrumb": "Password_scrypt"},
{"href": "./api/Password_promise.html#value-token", "title": "token", "contents": "token Password_algorithm t int Js Promise t Belt Result t string exn  ", "rendered": "<h4 class='item'>let token: (<a href=\"./api/Password_algorithm.html\">Password_algorithm</a>.<a href=\"./api/Password_algorithm.html#type-t\">t</a>, int) => Js.Promise.t(\n  Belt.Result.t(string, exn)\n)</h4>", "breadcrumb": "Password_promise"},
{"href": "./api/Password_promise.html#value-verify", "title": "verify", "contents": "verify Password_algorithm t string string Js Promise t Belt Result t bool exn   ", "rendered": "<h4 class='item'>let verify: (\n  <a href=\"./api/Password_algorithm.html\">Password_algorithm</a>.<a href=\"./api/Password_algorithm.html#type-t\">t</a>,\n  string,\n  string\n) => Js.Promise.t(Belt.Result.t(bool, exn))</h4>", "breadcrumb": "Password_promise"},
{"href": "./api/Password_promise.html#value-deriveKey", "title": "deriveKey", "contents": "deriveKey Password_algorithm t string Js Promise t Belt Result t string string exn  ", "rendered": "<h4 class='item'>let deriveKey: (\n  <a href=\"./api/Password_algorithm.html\">Password_algorithm</a>.<a href=\"./api/Password_algorithm.html#type-t\">t</a>,\n  string\n) => Js.Promise.t(Belt.Result.t((string, string), exn))</h4>", "breadcrumb": "Password_promise"},
{"href": "./api/Password_promise.html", "title": "Password_promise", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Password_promise"},
{"href": "./api/Password_promise.html", "title": "Password_promise", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Password_promise"},
{"href": "./api/Password_promise.html#Password_promise", "title": "Password_promise", "contents": "", "rendered": "", "breadcrumb": "Password_promise"},
{"href": "./api/Password_future.html#value-token", "title": "token", "contents": "token Password_algorithm t int Future t Belt Result t string exn  ", "rendered": "<h4 class='item'>let token: (<a href=\"./api/Password_algorithm.html\">Password_algorithm</a>.<a href=\"./api/Password_algorithm.html#type-t\">t</a>, int) => Future.t(\n  Belt.Result.t(string, exn)\n)</h4>", "breadcrumb": "Password_future"},
{"href": "./api/Password_future.html#value-verify", "title": "verify", "contents": "verify Password_algorithm t string string Future t Belt Result t bool exn   ", "rendered": "<h4 class='item'>let verify: (\n  <a href=\"./api/Password_algorithm.html\">Password_algorithm</a>.<a href=\"./api/Password_algorithm.html#type-t\">t</a>,\n  string,\n  string\n) => Future.t(Belt.Result.t(bool, exn))</h4>", "breadcrumb": "Password_future"},
{"href": "./api/Password_future.html#value-deriveKey", "title": "deriveKey", "contents": "deriveKey Password_algorithm t string Future t Belt Result t string string exn  ", "rendered": "<h4 class='item'>let deriveKey: (<a href=\"./api/Password_algorithm.html\">Password_algorithm</a>.<a href=\"./api/Password_algorithm.html#type-t\">t</a>, string) => Future.t(\n  Belt.Result.t((string, string), exn)\n)</h4>", "breadcrumb": "Password_future"},
{"href": "./api/Password_future.html", "title": "Password_future", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Password_future"},
{"href": "./api/Password_future.html", "title": "Password_future", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Password_future"},
{"href": "./api/Password_future.html#Password_future", "title": "Password_future", "contents": "", "rendered": "", "breadcrumb": "Password_future"},
{"href": "./api/Password_error.html", "title": "Password_error", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Password_error"},
{"href": "./api/Password_error.html", "title": "Password_error", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Password_error"},
{"href": "./api/Password_error.html#Password_error", "title": "Password_error", "contents": "", "rendered": "", "breadcrumb": "Password_error"},
{"href": "./api/Password_bcrypt.html#value-token", "title": "token", "contents": "token int Belt Result t string exn unit  unit  ", "rendered": "<h4 class='item'>let token: (int, Belt.Result.t(string, exn) => unit) => unit</h4>", "breadcrumb": "Password_bcrypt"},
{"href": "./api/Password_bcrypt.html#value-verify", "title": "verify", "contents": "verify string string Belt Result t bool exn unit  unit   ", "rendered": "<h4 class='item'>let verify: (\n  string,\n  string,\n  Belt.Result.t(bool, exn) => unit\n) => unit</h4>", "breadcrumb": "Password_bcrypt"},
{"href": "./api/Password_bcrypt.html#value-deriveKey", "title": "deriveKey", "contents": "deriveKey string Belt Result t string string exn unit  unit  ", "rendered": "<h4 class='item'>let deriveKey: (\n  string,\n  Belt.Result.t((string, string), exn) => unit\n) => unit</h4>", "breadcrumb": "Password_bcrypt"},
{"href": "./api/Password_bcrypt.html#value-fromJsError", "title": "fromJsError", "contents": "fromJsError Js Exn t Belt Result t exn ", "rendered": "<h4 class='item'>let fromJsError: Js.Exn.t => Belt.Result.t('a, exn)</h4>", "breadcrumb": "Password_bcrypt"},
{"href": "./api/Password_bcrypt.html", "title": "Password_bcrypt", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Password_bcrypt"},
{"href": "./api/Password_bcrypt.html", "title": "Password_bcrypt", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Password_bcrypt"},
{"href": "./api/Password_bcrypt.html#Password_bcrypt", "title": "Password_bcrypt", "contents": "", "rendered": "", "breadcrumb": "Password_bcrypt"},
{"href": "./api/Password_async.html#value-token", "title": "token", "contents": "token Password_algorithm t int Belt Result t string exn unit  unit   ", "rendered": "<h4 class='item'>let token: (\n  <a href=\"./api/Password_algorithm.html\">Password_algorithm</a>.<a href=\"./api/Password_algorithm.html#type-t\">t</a>,\n  int,\n  Belt.Result.t(string, exn) => unit\n) => unit</h4>", "breadcrumb": "Password_async"},
{"href": "./api/Password_async.html#value-verify", "title": "verify", "contents": "verify Password_algorithm t string string Belt Result t bool exn unit  unit    ", "rendered": "<h4 class='item'>let verify: (\n  <a href=\"./api/Password_algorithm.html\">Password_algorithm</a>.<a href=\"./api/Password_algorithm.html#type-t\">t</a>,\n  string,\n  string,\n  Belt.Result.t(bool, exn) => unit\n) => unit</h4>", "breadcrumb": "Password_async"},
{"href": "./api/Password_async.html#value-deriveKey", "title": "deriveKey", "contents": "deriveKey Password_algorithm t string Belt Result t string string exn unit  unit   ", "rendered": "<h4 class='item'>let deriveKey: (\n  <a href=\"./api/Password_algorithm.html\">Password_algorithm</a>.<a href=\"./api/Password_algorithm.html#type-t\">t</a>,\n  string,\n  Belt.Result.t((string, string), exn) => unit\n) => unit</h4>", "breadcrumb": "Password_async"},
{"href": "./api/Password_async.html", "title": "Password_async", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Password_async"},
{"href": "./api/Password_async.html", "title": "Password_async", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Password_async"},
{"href": "./api/Password_async.html#Password_async", "title": "Password_async", "contents": "", "rendered": "", "breadcrumb": "Password_async"},
{"href": "./api/Password_algorithm.html#value-toString", "title": "toString", "contents": "toString t string ", "rendered": "<h4 class='item'>let toString: <a href=\"./api/Password_algorithm.html#type-t\">t</a> => string</h4>", "breadcrumb": "Password_algorithm"},
{"href": "./api/Password_algorithm.html#value-fromString", "title": "fromString", "contents": "fromString string t ", "rendered": "<h4 class='item'>let fromString: string => <a href=\"./api/Password_algorithm.html#type-t\">t</a></h4>", "breadcrumb": "Password_algorithm"},
{"href": "./api/Password_algorithm.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t = | Bcrypt | Scrypt\n</h4>", "breadcrumb": "Password_algorithm"},
{"href": "./api/Password_algorithm.html", "title": "Password_algorithm", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Password_algorithm"},
{"href": "./api/Password_algorithm.html", "title": "Password_algorithm", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Password_algorithm"},
{"href": "./api/Password_algorithm.html#Password_algorithm", "title": "Password_algorithm", "contents": "", "rendered": "", "breadcrumb": "Password_algorithm"},
{"href": "./api/Password.html#value-token", "title": "token", "contents": "token Password_algorithm t int Belt Result t string exn unit  unit   ", "rendered": "<h4 class='item'>let token: (\n  <a href=\"./api/Password_algorithm.html\">Password_algorithm</a>.<a href=\"./api/Password_algorithm.html#type-t\">t</a>,\n  int,\n  Belt.Result.t(string, exn) => unit\n) => unit</h4>", "breadcrumb": "Password"},
{"href": "./api/Password.html#value-verify", "title": "verify", "contents": "verify Password_algorithm t string string Belt Result t bool exn unit  unit    ", "rendered": "<h4 class='item'>let verify: (\n  <a href=\"./api/Password_algorithm.html\">Password_algorithm</a>.<a href=\"./api/Password_algorithm.html#type-t\">t</a>,\n  string,\n  string,\n  Belt.Result.t(bool, exn) => unit\n) => unit</h4>", "breadcrumb": "Password"},
{"href": "./api/Password.html#value-deriveKey", "title": "deriveKey", "contents": "deriveKey Password_algorithm t string Belt Result t string string exn unit  unit   ", "rendered": "<h4 class='item'>let deriveKey: (\n  <a href=\"./api/Password_algorithm.html\">Password_algorithm</a>.<a href=\"./api/Password_algorithm.html#type-t\">t</a>,\n  string,\n  Belt.Result.t((string, string), exn) => unit\n) => unit</h4>", "breadcrumb": "Password"},
{"href": "./api/Password.html", "title": "Password", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Password"},
{"href": "./api/Password.html", "title": "Password", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Password"},
{"href": "./api/Password.html#Password", "title": "Password", "contents": "", "rendered": "", "breadcrumb": "Password"}]