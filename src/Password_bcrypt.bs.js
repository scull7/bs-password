// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Bcrypt = require("bs-bcrypt/src/Bcrypt.bs.js");
var Password_error = require("./Password_error.bs.js");

function fromJsError(e) {
  var match = e.message;
  var exn = match !== undefined ? [
      Password_error.EncryptionFailure,
      match
    ] : [
      Password_error.UknownFailure,
      "bcrypt_unknown_failure"
    ];
  return /* Error */Block.__(1, [exn]);
}

function deriveKey(input, finished) {
  return Bcrypt.genSalt(10, (function (param) {
                if (param.tag) {
                  return Curry._1(finished, fromJsError(param[0]));
                } else {
                  var salt = param[0];
                  return Bcrypt.hash(input, /* `Salt */[
                              925281974,
                              salt
                            ], (function (param) {
                                if (param.tag) {
                                  return Curry._1(finished, fromJsError(param[0]));
                                } else {
                                  return Curry._1(finished, /* Ok */Block.__(0, [/* tuple */[
                                                  salt,
                                                  param[0]
                                                ]]));
                                }
                              }));
                }
              }));
}

function verify(key, input, finished) {
  return Bcrypt.compare(input, key, (function (param) {
                if (param.tag) {
                  return Curry._1(finished, fromJsError(param[0]));
                } else {
                  return Curry._1(finished, /* Ok */Block.__(0, [param[0]]));
                }
              }));
}

function token(length, finished) {
  return Bcrypt.genSalt(length, (function (param) {
                if (param.tag) {
                  return Curry._1(finished, fromJsError(param[0]));
                } else {
                  return Curry._1(finished, /* Ok */Block.__(0, [param[0]]));
                }
              }));
}

exports.fromJsError = fromJsError;
exports.deriveKey = deriveKey;
exports.verify = verify;
exports.token = token;
/* Bcrypt Not a pure module */
